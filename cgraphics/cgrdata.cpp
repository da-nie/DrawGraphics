//****************************************************************************************************
//подключаемые библиотеки
//****************************************************************************************************
#include "cgrdata.h"
#include <math.h>

//****************************************************************************************************
//конструктор и деструктор
//****************************************************************************************************

//----------------------------------------------------------------------------------------------------
//конструктор
//----------------------------------------------------------------------------------------------------
CGrData::CGrData(void)
{
 vector_CGrPoint.clear();
 Enable=false;
 CurrentPixelDensity=0;
}
//----------------------------------------------------------------------------------------------------
//конструктор копий
//----------------------------------------------------------------------------------------------------
CGrData::CGrData(const CGrData& cGrDataPtr)
{
 Enable=cGrDataPtr.Enable;
 cGrLineStyle=cGrDataPtr.cGrLineStyle;
 cGrColor=cGrDataPtr.cGrColor;
 SetName(cGrDataPtr.Name);
 //копируем массивы
 vector_CGrPoint=cGrDataPtr.vector_CGrPoint;
}

//----------------------------------------------------------------------------------------------------
//деструктор
//----------------------------------------------------------------------------------------------------
CGrData::~CGrData()
{  
 DeletePoints();	
}
//****************************************************************************************************
//операторы
//****************************************************************************************************

//операция присваивания
CGrData& CGrData::operator=(const CGrData& cGrDataPtr)
{
 if (this==&cGrDataPtr) return (*this);//проверка на присваивание себе
 Enable=cGrDataPtr.Enable;
 cGrLineStyle=cGrDataPtr.cGrLineStyle;
 cGrColor=cGrDataPtr.cGrColor;
 SetName(cGrDataPtr.Name); 
 //копируем массивы
 vector_CGrPoint=cGrDataPtr.vector_CGrPoint;
 return(*this);
}

//****************************************************************************************************
//закрытые функции
//****************************************************************************************************

//----------------------------------------------------------------------------------------------------
//создать вектор точек для отображения на экране
//----------------------------------------------------------------------------------------------------
void CGrData::CreateForView(void)
{
 vector_CGrPointForView.clear();
 size_t amount=vector_CGrPoint.size();
 size_t old_pos;
 double old_x;
 double old_y;
 double min_y;
 double max_y;
 for(size_t n=0;n<amount;n++)
 {
  //получаем точку
  double x=vector_CGrPoint[n].X;
  double y=vector_CGrPoint[n].Y;
  int32_t pos=static_cast<int32_t>(x/CurrentPixelDensity);
  //начальная инициализация
  if (n==0)
  {
   old_pos=pos;
   old_y=y;
   old_x=x;
   min_y=y;
   max_y=y;
  }
  //обрабатываем ситуацию
  if (old_pos!=pos || n==amount-1)//другая проекция
  {
   CGrPoint cGrPoint[3];
   //добавляем минимальную точку в список
   cGrPoint[0].X=old_x;
   cGrPoint[0].Y=min_y;
   //добавляем максимальную точку в список
   cGrPoint[1].X=old_x;
   cGrPoint[1].Y=max_y;
   //добавляем выходную точку в список
   cGrPoint[2].X=old_x;
   cGrPoint[2].Y=old_y;
   //добавляем точку, только если такой ещё нет
   for(size_t i=0;i<3;i++)
   {
    bool add=true;
    for(size_t j=i;j<3;j++)
    {
     if (i==j) continue;
     if (cGrPoint[i].X==cGrPoint[j].X && cGrPoint[i].Y==cGrPoint[j].Y)
     {
      add=false;
      break;
     }
    }
    if (add==true) vector_CGrPointForView.push_back(cGrPoint[i]);
   }
   //входную точку в список
   cGrPoint[0].X=x;
   cGrPoint[0].Y=y;
   vector_CGrPointForView.push_back(cGrPoint[0]);
   //обновляем данные
   old_pos=pos;
   old_y=y;
   old_x=x;
   min_y=y;
   max_y=y;
  }
  else
  {
   old_x=x;
   old_y=y;
   if (min_y>y) min_y=y;
   if (max_y<y) max_y=y;
  }
 }
}
//****************************************************************************************************
//открытые функции
//****************************************************************************************************

//----------------------------------------------------------------------------------------------------
//установить разрешения отображения
//----------------------------------------------------------------------------------------------------
void CGrData::SetEnable(bool enable)
{
 Enable=enable;
}
//----------------------------------------------------------------------------------------------------
//установить название графика
//----------------------------------------------------------------------------------------------------
void CGrData::SetName(const std::string &name)
{ 
 Name=name;	
}
//----------------------------------------------------------------------------------------------------
//установить цвет графика
//----------------------------------------------------------------------------------------------------
void CGrData::SetGrColor(const CGrColor &cGrColor_Set)
{
 cGrColor=cGrColor_Set;
}
//----------------------------------------------------------------------------------------------------
//установить стиль линий графика
//----------------------------------------------------------------------------------------------------
void CGrData::SetGrLineStyle(const CGrLineStyle &cGrLineStyle_Set)
{
 cGrLineStyle=cGrLineStyle_Set;
}
//----------------------------------------------------------------------------------------------------
//получить разрешение на отображение
//----------------------------------------------------------------------------------------------------
bool CGrData::GetEnable(void) const
{
 return(Enable);
}
//----------------------------------------------------------------------------------------------------
//получить название графика
//----------------------------------------------------------------------------------------------------
void CGrData::GetName(std::string &name) const
{
 name=Name;	
}
//----------------------------------------------------------------------------------------------------
//получить цвет графика
//----------------------------------------------------------------------------------------------------
void CGrData::GetGrColor(CGrColor &cGrColor_Get) const
{
 cGrColor_Get=cGrColor;	
}
//----------------------------------------------------------------------------------------------------
//получить стиль линий графика
//----------------------------------------------------------------------------------------------------
void CGrData::GetGrLineStyle(CGrLineStyle &cGrLineStyle_Get) const
{
 cGrLineStyle_Get=cGrLineStyle;
}
//----------------------------------------------------------------------------------------------------
//получить количество исходных точек графика
//----------------------------------------------------------------------------------------------------
size_t CGrData::GetPointAmount(void) const
{
 return(vector_CGrPoint.size());
}
//----------------------------------------------------------------------------------------------------
//удалить все исходные точки графика
//----------------------------------------------------------------------------------------------------
void CGrData::DeletePoints(void)
{
 vector_CGrPoint.clear();
 vector_CGrPointForView.clear();
 CurrentPixelDensity=0;
}
//----------------------------------------------------------------------------------------------------
//получить X точки графика
//----------------------------------------------------------------------------------------------------
double CGrData::GetX(size_t index) const
{
 return(vector_CGrPoint[index].X);
}
//----------------------------------------------------------------------------------------------------
//получить Y точки графика
//----------------------------------------------------------------------------------------------------
double CGrData::GetY(size_t index) const
{	
 return(vector_CGrPoint[index].Y);
}
//----------------------------------------------------------------------------------------------------
//установить X точки графика
//----------------------------------------------------------------------------------------------------
void CGrData::SetX(size_t index,double value)
{
 vector_CGrPoint[index].X=value;
 CurrentPixelDensity=0;
}
//----------------------------------------------------------------------------------------------------
//установить Y точки графика
//----------------------------------------------------------------------------------------------------
void CGrData::SetY(size_t index,double value)
{
 vector_CGrPoint[index].Y=value;
 CurrentPixelDensity=0;
}
//----------------------------------------------------------------------------------------------------
//добавить точку в конец графика
//----------------------------------------------------------------------------------------------------
void CGrData::AddPoint(double x,double y)
{
 vector_CGrPoint.push_back(CGrPoint(x,y));
 CurrentPixelDensity=0;
}
//----------------------------------------------------------------------------------------------------
//получить ссылку на вектор данных графиков
//----------------------------------------------------------------------------------------------------
std::vector<CGrPoint>& CGrData::GetGrPointVector(void)
{
 return(vector_CGrPoint);
}
//----------------------------------------------------------------------------------------------------
//получить X точки графика для отображения на экране
//----------------------------------------------------------------------------------------------------
double CGrData::GetXForView(size_t index) const
{
 return(vector_CGrPointForView[index].X);
}
//----------------------------------------------------------------------------------------------------
//получить Y точки графика для отображения на экране
//----------------------------------------------------------------------------------------------------
double CGrData::GetYForView(size_t index) const
{
 return(vector_CGrPointForView[index].Y);
}
//----------------------------------------------------------------------------------------------------
//задать параметры отображения графика на экране
//----------------------------------------------------------------------------------------------------
void CGrData::SetViewProperty(const CGrRect &cGrRect_Coord,const CGrRect &cGrRect_Screen)
{
    static const long double DENSITY_EPS=0.0001;//погрешность совпадения плотностей пикселей
    static const long double DENSITY_ZERO_EPS=0.0000001;//погрешность совпадения плотностей пикселей с нулём
 //считаем плотность пикселей
 long double dx_screen=cGrRect_Screen.Right-cGrRect_Screen.Left;
 long double dx_coord=cGrRect_Coord.Right-cGrRect_Coord.Left;
 if (dx_screen==0) dx_screen=1;
 long double density=dx_coord/dx_screen;
 if (fabs(density-CurrentPixelDensity)<DENSITY_EPS) return;//текущая плотность пикселей подходит для отображения графика
 CurrentPixelDensity=density;
 if (fabs(CurrentPixelDensity)<DENSITY_ZERO_EPS) return;//плотность пикселей не может быть равна нулю
 //создаём данные для отображения при заданной плотности пикселей
 CreateForView();
}
//----------------------------------------------------------------------------------------------------
//получить количество точек графика для отображения на экране
//----------------------------------------------------------------------------------------------------
size_t CGrData::GetPointAmountForView(void) const
{
 return(vector_CGrPointForView.size());
}

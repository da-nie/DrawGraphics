//****************************************************************************************************
//подключаемые библиотеки
//****************************************************************************************************
#include "ctranslator.h"
#include <windows.h>
#include <vector>

//****************************************************************************************************
//глобальные переменные
//****************************************************************************************************

//****************************************************************************************************
//константы
//****************************************************************************************************

//****************************************************************************************************
//макроопределения
//****************************************************************************************************

//****************************************************************************************************
//конструктор и деструктор
//****************************************************************************************************

//----------------------------------------------------------------------------------------------------
//конструктор
//----------------------------------------------------------------------------------------------------
CTranslator::CTranslator(void)
{
}
//----------------------------------------------------------------------------------------------------
//деструктор
//----------------------------------------------------------------------------------------------------
CTranslator::~CTranslator()
{
}
//****************************************************************************************************
//закрытые функции
//****************************************************************************************************

//****************************************************************************************************
//открытые функции
//****************************************************************************************************

//----------------------------------------------------------------------------------------------------
//выполнить перекодировку
//----------------------------------------------------------------------------------------------------
std::string CTranslator::Convert(const char *string_utf8)
{
 std::string output;
 long size=MultiByteToWideChar(CP_UTF8,0,string_utf8,-1,0,0);
 if (size!=0)
 {
  std::vector<WCHAR> tmp_str(size+1);
  MultiByteToWideChar(CP_UTF8,0,string_utf8,-1,tmp_str.data(),size);
  long length=WideCharToMultiByte(CP_UTF8,0,tmp_str.data(),-1,0,0,0,0);
  if (length>0)
  {
   std::vector<char> str(length+1);
   WideCharToMultiByte(CP_ACP,0,tmp_str.data(),-1,str.data(),length,0,0);
   output=str.data();
  }
 }
 return(output);
}